import sqlite3
import telebot

import settings
from db_commands import DataBase

bot = telebot.TeleBot(settings.TOKEN)
URL = "https://api.telegram.org/bot{}/".format(settings.TOKEN)
db = DataBase()
db.create_database()


@bot.message_handler(commands=['help'])
def help_instruction(message):
    instruction = """–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.
    \n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Ä–µ–º—è –ø–æ–ª–∏–≤–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üå∑ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ"."""
    bot.send_message(message.chat.id, instruction)


@bot.message_handler(commands=['start'])
def start(message):
    sticker = open('static/AnimatedSticker.tgs', 'rb')
    bot.send_sticker(message.chat.id, sticker)

    # keyboard
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = telebot.types.KeyboardButton("üå∑ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ")
    markup.add(item1)

    # Adding user to a database if he is not already in it:
    data = db.check_if_user_is_already_in_database(message.chat.id)
    if data is None:
        db.add_user_to_database(message)
    else:
        print('This user is already exists')

    bot.send_message(message.chat.id,
                     f'{message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {bot.get_me().username}! '
                     f'–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–ª –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ,'
                     f' –∫–æ–≥–¥–∞ –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª–∏—Ç—å!', parse_mode='html', reply_markup=markup)


flower_name = ''
flower_type = ''
flower_watering_interval = ''


@bot.message_handler(content_types=['text'])
def user_message(message):
    if message.chat.type == 'private':
        if message.text == "üå∑ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ":
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è:")
            bot.register_next_step_handler(message, get_flower_name)

        else:
            bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢'
                                              '\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/help".')


def get_flower_name(message):
    global flower_name
    flower_name = message.text
    bot.send_message(message.chat.id,  "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Ç–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, get_flower_type)


def get_flower_type(message):
    global flower_type
    flower_type = message.text
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ª–∏–≤–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ —á–∞—Å–∞—Ö:")
    bot.register_next_step_handler(message, get_flower_watering_interval)


def get_flower_watering_interval(message):
    global flower_watering_interval
    try:
        int(message.text)
    except ValueError:
        bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:')
        bot.register_next_step_handler(message, get_flower_watering_interval)
    else:
        flower_watering_interval = message.text
        keyboard = telebot.types.InlineKeyboardMarkup()
        key_yes = telebot.types.InlineKeyboardButton(text='–î–∞', callback_data='yes')
        key_no = telebot.types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no')
        keyboard.add(key_no, key_yes)
        question = f'–ü—Ä–æ–≤–µ—Ä–∏–º –∏–Ω—Ñ—É: —Ü–≤–µ—Ç–æ–∫ {flower_name} —Ç–∏–ø–∞ {flower_type},' \
                   f'–∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª–∏–≤–∞—Ç—å –∫–∞–∂–¥—ã–µ {flower_watering_interval} —á–∞—Å–æ–≤?'
        bot.send_message(message.chat.id, question, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤–≤–µ–¥–µ–Ω–∞ –∏–Ω—Ñ–∞ –ø—Ä–æ —Ü–≤–µ—Ç–æ–∫:
@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == "yes":
        db.add_flower_info_to_database(call.message.chat.id, flower_name, flower_type, flower_watering_interval)

        # Remove inline buttons and send notification:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–†–∞—Å—Ç–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ñ–¥–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª–∏–≤–∞!)", reply_markup=None)
    elif call.data == "no":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text="–ù–∞—á–Ω–∏—Ç–µ —Å –Ω–∞—á–∞–ª–∞!)", reply_markup=None)


bot.polling(none_stop=True)
